{"config":{"lang":["en"],"separator":"[\\s\\-]+"},"docs":[{"title":"Cirrus CLI","text":"<p>Tart itself is only responsible for managing virtual machines, but we've built Tart support into a tool called Cirrus CLI also developed by Cirrus Labs. Cirrus CLI is a command line tool with one configuration format to execute common CI steps (run a script, cache a folder, etc.) locally or in any CI system. We built Cirrus CLI to solve \"But it works on my machine!\" problem.</p> <p>Here is an example of a <code>.cirrus.yml</code> configuration file which will start a Tart VM, will copy over working directory and will run scripts and other instructions inside the virtual machine:</p> <pre><code>task:\n  name: hello\n  macos_instance:\n    # can be a remote or a local virtual machine\n    image: ghcr.io/cirruslabs/macos-monterey-base:latest\n  hello_script:\n    - echo \"Hello from within a Tart VM!\"\n    - echo \"Here is my CPU info:\"\n    - sysctl -n machdep.cpu.brand_string\n    - sleep 15\n</code></pre> <p>Put the above <code>.cirrus.yml</code> file in the root of your repository and run it with the following command:</p> <pre><code>brew install cirruslabs/cli/cirrus\ncirrus run\n</code></pre> <p></p> <p>Cirrus CI already leverages Tart to power its macOS cloud infrastructure. The <code>.cirrus.yml</code> config from above will just work in Cirrus CI and your tasks will be executed inside Tart VMs in our cloud.</p> <p>Note: Cirrus CI only allows images managed and regularly updated by us.</p>","location":"cirrus-cli/"},{"title":"Retrieving artifacts from within Tart VMs","text":"<p>In many cases there is a need to retrieve particular files or a folder from within a Tart virtual machine. For example, the below <code>.cirrus.yml</code> configuration defines a single task that builds a <code>tart</code> binary and exposes it via <code>artifacts</code> instruction:</p> <pre><code>task:\n  name: Build\n  macos_instance:\n    image: ghcr.io/cirruslabs/macos-monterey-xcode:latest\n  build_script: swift build --product tart\n  binary_artifacts:\n    path: .build/debug/tart\n</code></pre> <p>Running Cirrus CLI with <code>--artifacts-dir</code> will write defined <code>artifacts</code> to the provided local directory on the host:</p> <pre><code>cirrus run --artifacts-dir artifacts\n</code></pre> <p>Note that all retrieved artifacts will be prefixed with the associated task name and <code>artifacts</code> instruction name. For the example above, <code>tart</code> binary will be saved to <code>$PWD/artifacts/Build/binary/.build/debug/tart</code>.</p>","location":"cirrus-cli/#retrieving-artifacts-from-within-tart-vms"},{"title":"FAQ","text":"","location":"faq/"},{"title":"How Tart is different from Anka?","text":"<p>Under the hood Tart is using the same technology as Anka 3.0 so there should be no real difference in performance or features supported. If there is some feature missing please don't hesitate to create a feature request.</p> <p>Instead of Anka Registry, Tart can work with any OCI-compatible container registry. This provides a much more consistent and scalable experience for distributing virtual machines.</p> <p>Tart doesn't yet have an analogue of Anka Controller for managing long living VMs but soon will be.</p>","location":"faq/#how-tart-is-different-from-anka"},{"title":"VM location on disk","text":"<p>Tart stores all it's files in <code>~/.tart/</code> directory. Local images that you can run are stored in <code>~/.tart/vms/</code>. Remote images are pulled into <code>~/.tart/cache/OCIs/</code>.</p>","location":"faq/#vm-location-on-disk"},{"title":"Nested virtualization support?","text":"<p>Tart is limited by functionality of Apple's <code>Virtualization.Framework</code>. At the moment <code>Virtualization.Framework</code> doesn't support nested virtualization.</p>","location":"faq/#nested-virtualization-support"},{"title":"Connecting to a service running on host","text":"<p>To connect from within a virtual machine to a service running on the host machine please first make sure that the service is binded to <code>0.0.0.0</code>.</p> <p>Then from within a virtual machine you can access the service using the router's IP address that you can get either from <code>Preferences -&gt; Network</code> or by running the following command in the Terminal:</p> <pre><code>netstat -nr | grep default | head -n 1 | awk '{print $2}'\n</code></pre> <p>Note: that accessing host is only possible with the default NAT network. If you are running your virtual machines with Softnet (via <code>tart run --net-softnet &lt;VM NAME&gt;)</code>, then the network isolation is stricter and it's not only possible to access the host.</p>","location":"faq/#connecting-to-a-service-running-on-host"},{"title":"Changing the default NAT subnet","text":"<p>To change the default network to <code>192.168.77.1</code>:</p> <pre><code>sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.vmnet.plist Shared_Net_Address -string 192.168.77.1\n</code></pre> <p>Note that even through a network would normally be specified as <code>192.168.77.0</code>, the vmnet framework seems to treat this as a starting address too and refuses to pick up such network-like values.</p> <p>The default subnet mask <code>255.255.255.0</code> should suffice for most use-cases, however, you can also change it to <code>255.255.0.0</code>, for example:</p> <pre><code>sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.vmnet.plist Shared_Net_Mask -string 255.255.0.0\n</code></pre>","location":"faq/#changing-the-default-nat-subnet"},{"title":"GitHub Actions","text":"<p>Tart already powers several CI services mentioned above including our own Cirrus CI which offers unlimited concurrency with per-second billing. For services that haven't leveraged Tart yet, we offer fully managed runners via a monthly subscription. Cirrus Runners is the fastest way to get your current CI workflows to benefit from Apple Silicon hardware. No need to manage infrastructure or migrate to another CI provider.</p>","location":"github-actions/"},{"title":"Configuring Cirrus Runners","text":"<p>Configuring Cirrus Runners for GitHub Actions is as simple as installing Cirrus Runners App. After successful installation and subscription configuration, use any of Ventura images managed by us in <code>runs-on</code>:</p> <pre><code>name: Test Suite\njobs:\n  test:\n    runs-on: ghcr.io/cirruslabs/macos-ventura-xcode:latest\n</code></pre> <p>When workflows are executing you'll see Cirrus on-demand runners on your organization's settings page at <code>https://github.com/organizations/&lt;ORGANIZATION&gt;/settings/actions/runners</code>.</p> <p></p>","location":"github-actions/#configuring-cirrus-runners"},{"title":"Quick Start","text":"<p>Try running a Tart VM on your Apple Silicon device running macOS 12.0 (Monterey) or later (will download a 25 GB image):</p> <pre><code>brew install cirruslabs/cli/tart\ntart clone ghcr.io/cirruslabs/macos-ventura-base:latest ventura-base\ntart run ventura-base\n</code></pre> <p>  </p>","location":"quick-start/"},{"title":"SSH access","text":"<p>If the guest VM is running and configured to accept incoming SSH connections you can conveniently connect to it like so:</p> <pre><code>ssh admin@$(tart ip macos-monterey-base)\n</code></pre>","location":"quick-start/#ssh-access"},{"title":"Mounting directories","text":"<p>To mount a directory, run the VM with the <code>--dir</code> argument:</p> <pre><code>tart run --dir=project:~/src/project vm\n</code></pre> <p>Here, the <code>project</code> specifies a mount name, whereas the <code>~/src/project</code> is a path to the host's directory to expose to the VM.</p> <p>It is also possible to mount directories in read-only mode by adding a third parameter, <code>ro</code>:</p> <pre><code>tart run --dir=project:~/src/project:ro vm\n</code></pre> <p>To mount multiple directories, repeat the <code>--dir</code> argument for each directory:</p> <pre><code>tart run --dir=www1:~/project1/www --dir=www2:~/project2/www\n</code></pre> <p>Note that the first parameter in each <code>--dir</code> argument must be unique, otherwise only the last <code>--dir</code> argument using that name will be used.</p> <p>Note: to use the directory mounting feature, the host needs to run macOS 13.0 (Ventura) or newer.</p>","location":"quick-start/#mounting-directories"},{"title":"Accessing mounted directories in macOS guests","text":"<p>All shared directories are automatically mounted to <code>/Volumes/My Shared Files</code> directory.</p> <p>The directory we've mounted above will be accessible from the <code>/Volumes/My Shared Files/project</code> path inside a guest VM.</p> <p>Note: to use the directory mounting feature, the guest VM needs to run macOS 13.0 (Ventura) or newer.</p>","location":"quick-start/#accessing-mounted-directories-in-macos-guests"},{"title":"Accessing mounted directories in Linux guests","text":"<p>To be able to access the shared directories from the Linux guest, you need to manually mount the virtual filesystem first:</p> <pre><code>mount -t virtiofs com.apple.virtio-fs.automount /mnt/shared\n</code></pre> <p>The directory we've mounted above will be accessible from the <code>/mnt/shared/project</code> path inside a guest VM.</p>","location":"quick-start/#accessing-mounted-directories-in-linux-guests"},{"title":"Managing Virtual Machine","text":"","location":"vm-management/"},{"title":"Creating from scratch","text":"<p>Tart supports macOS and Linux virtual machines. All commands like <code>run</code> and <code>pull</code> work the same way regarding of the underlying OS a particular VM image has. The only difference is how such VM images are created. Please check sections below for macOS and Linux instructions.</p>","location":"vm-management/#creating-from-scratch"},{"title":"Creating a macOS VM image from scratch","text":"<p>Tart can create VMs from <code>*.ipsw</code> files. You can download a specific <code>*.ipsw</code> file here or you can use <code>latest</code> instead of a path to <code>*.ipsw</code> to download the latest available version:</p> <pre><code>tart create --from-ipsw=latest monterey-vanilla\ntart run monterey-vanilla\n</code></pre> <p>After the initial booting of the VM you'll need to manually go through the macOS installation process. As a convention we recommend creating an <code>admin</code> user with an <code>admin</code> password. After the regular installation please do some additional modifications in the VM:</p> <ol> <li>Enable Auto-Login. Users &amp; Groups -&gt; Login Options -&gt; Automatic login -&gt; admin.</li> <li>Allow SSH. Sharing -&gt; Remote Login</li> <li>Disable Lock Screen. Preferences -&gt; Lock Screen -&gt; disable \"Require Password\" after 5.</li> <li>Disable Screen Saver.</li> <li>Run <code>sudo visudo</code> in Terminal, find <code>%admin ALL=(ALL) ALL</code> add <code>admin ALL=(ALL) NOPASSWD: ALL</code> to allow sudo without a password.</li> </ol>","location":"vm-management/#creating-a-macos-vm-image-from-scratch"},{"title":"Creating a Linux VM image from scratch","text":"<p>Linux VMs are supported on hosts running macOS 13.0 (Ventura) or newer.</p> <pre><code># Create a bare VM\ntart create --linux ubuntu\n\n# Install Ubuntu\ntart run --disk focal-desktop-arm64.iso ubuntu\n\n# Run VM\ntart run ubuntu\n</code></pre> <p>After the initial setup please make sure your VM can be SSH-ed into by running the following commands inside your VM:</p> <pre><code>sudo apt update\nsudo apt install -y openssh-server\nsudo ufw allow ssh\n</code></pre>","location":"vm-management/#creating-a-linux-vm-image-from-scratch"},{"title":"Configuring a VM","text":"<p>By default, a tart VM uses 2 CPUs and 4 GB of memory with a <code>1024x768</code> display. This can be changed with <code>tart set</code> command. Please refer to <code>tart set --help</code> for additional details.</p>","location":"vm-management/#configuring-a-vm"},{"title":"Building with Packer","text":"<p>Please refer to Tart Packer Plugin repository for setup instructions. Here is an example of a template to build <code>monterey-base</code> local image based of a remote image:</p> <pre><code>packer {\n  required_plugins {\n    tart = {\n      version = \"&gt;= 0.5.3\"\n      source  = \"github.com/cirruslabs/tart\"\n    }\n  }\n}\n\nsource \"tart-cli\" \"tart\" {\n  vm_base_name = \"ghcr.io/cirruslabs/macos-ventura-base:latest\"\n  vm_name      = \"my-custom-ventura\"\n  cpu_count    = 4\n  memory_gb    = 8\n  disk_size_gb = 70\n  ssh_password = \"admin\"\n  ssh_timeout  = \"120s\"\n  ssh_username = \"admin\"\n}\n\nbuild {\n  sources = [\"source.tart-cli.tart\"]\n\n  provisioner \"shell\" {\n    inline = [\"echo 'Disabling spotlight indexing...'\", \"sudo mdutil -a -i off\"]\n  }\n\n  # more provisioners\n}\n</code></pre> <p>Here is a repository with Packer templates used to build all the images managed by us.</p>","location":"vm-management/#building-with-packer"},{"title":"Working with a Remote OCI Container Registry","text":"<p>For example, let's say you want to push/pull images to a registry hosted at https://acme.io/.</p>","location":"vm-management/#working-with-a-remote-oci-container-registry"},{"title":"Registry Authorization","text":"<p>First, you need to log in and save credential for <code>acme.io</code> host via <code>tart login</code> command:</p> <pre><code>tart login acme.io\n</code></pre> <p>Credentials are securely stored in Keychain.</p> <p>In addition, Tart supports Docker credential helpers if defined in <code>~/.docker/config.json</code>.</p> <p>Finally, <code>TART_REGISTRY_USERNAME</code> and <code>TART_REGISTRY_PASSWORD</code> environment variables allow to override authorization for all registries which might useful for integrating with your CI's secret management.</p>","location":"vm-management/#registry-authorization"},{"title":"Pushing a Local Image","text":"<p>Once credentials are saved for <code>acme.io</code>, run the following command to push a local images remotely with two tags:</p> <pre><code>tart push my-local-vm-name acme.io/remoteorg/name:latest acme.io/remoteorg/name:v1.0.0\n</code></pre>","location":"vm-management/#pushing-a-local-image"},{"title":"Pulling a Remote Image","text":"<p>You can either pull an image:</p> <pre><code>tart pull acme.io/remoteorg/name:latest\n</code></pre> <p>...or instantiate a VM from a remote image:</p> <pre><code>tart clone acme.io/remoteorg/name:latest my-local-vm-name\n</code></pre> <p>This invocation calls the <code>tart pull</code> implicitly (if the image is not being present) before doing the actual cloning.</p>","location":"vm-management/#pulling-a-remote-image"},{"title":"Blog","text":"","location":"blog/"}]}